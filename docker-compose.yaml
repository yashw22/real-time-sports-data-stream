services:
  broker:
    image: apache/kafka:3.9.0
    container_name: broker
    expose:
      - 9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1

  postgres:
    image: postgres:13-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: sports_db
    ports:
      - 5432:5432
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/init.sql

  producer:
    build: ./game-producer
    container_name: producer
    depends_on:
      - broker
      - postgres
    environment:
      BROKER_SERVER: broker:9092
      POSTGRES_HOST: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: sports_db

  server:
    build: ./server-with-consumer
    container_name: server
    ports:
      - 5000:5000
    depends_on:
      - producer

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "8080:80"
    # restart: always
